import { useContext, useEffect, useState } from "react";
import Tabs from "../components/Tabs";
import Table from "../components/Table";
import { ConfigContext } from "../context/ConfigContext";
import useDialog from "../hooks/useDialog";
import useAccounts from "../hooks/useAccounts";
import currencies from "currency-codes";
import useInts from "../hooks/useInts";

export default function Config() {
  const [activeTab, setActiveTab] = useState(0);

  return (
    <main className="main">
      <section className="wrapper--space-between">
        <Tabs
          activeTab={activeTab}
          btnObj={[
            { label: "Accounts", action: () => setActiveTab(0) },
            { label: "Integrations", action: () => setActiveTab(1) },
            { label: "Settings", action: () => setActiveTab(2) },
          ]}
        />

        <Button activeTab={activeTab} />
      </section>

      <section className="tables">
        <Tab tab={activeTab} />
      </section>
    </main>
  );
}

function Button({ activeTab }) {
  const { dispatch } = useContext(ConfigContext);

  function onAddAccount() {
    dispatch({ type: "updateShowAccountModal", payload: true });
    dispatch({ type: "updateAccountAction", payload: "add" });
  }

  function onAddIntegration() {}

  switch (activeTab) {
    case 0:
      return (
        <div className="button v2 filled" onClick={onAddAccount}>
          <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
            <path
              d="M8.5689 14.7608C8.5689 13.5329 8.92622 12.3886 9.54264 11.4261L2.14116 11.4267C0.95802 11.4267 -0.00109863 12.3857 -0.00109863 13.5689V14.4452C-0.00109863 14.9902 0.168844 15.5216 0.485067 15.9654C1.95412 18.0272 4.35748 19.0485 7.6163 19.0485C8.50345 19.0485 9.32735 18.9728 10.0851 18.8203C9.14064 17.7333 8.5689 16.3138 8.5689 14.7608ZM12.3793 4.76297C12.3793 2.13246 10.2468 0 7.6163 0C4.98576 0 2.8533 2.13246 2.8533 4.76297C2.8533 7.39349 4.98576 9.52595 7.6163 9.52595C10.2468 9.52595 12.3793 7.39349 12.3793 4.76297ZM20 14.7607C20 11.8672 17.6543 9.52147 14.7608 9.52147C11.8672 9.52147 9.52149 11.8672 9.52149 14.7607C9.52149 17.6543 11.8672 20 14.7608 20C17.6543 20 20 17.6543 20 14.7607ZM14.6751 11.4344L14.7608 11.4267L14.8463 11.4344C15.0407 11.4696 15.1941 11.623 15.2293 11.8174L15.2371 11.903L15.2361 14.2844H17.6222L17.7079 14.2922C17.9022 14.3274 18.0556 14.4808 18.0908 14.6752L18.0985 14.7607L18.0908 14.8464C18.0556 15.0408 17.9022 15.1941 17.7079 15.2294L17.6222 15.237H15.2361L15.2371 17.6185L15.2293 17.7042C15.1941 17.8986 15.0407 18.0519 14.8463 18.0872L14.7608 18.0948L14.6751 18.0872C14.4807 18.0519 14.3274 17.8986 14.2921 17.7042L14.2845 17.6185L14.2835 15.237H11.9067L11.8211 15.2294C11.6266 15.1941 11.4734 15.0408 11.438 14.8464L11.4304 14.7607L11.438 14.6752C11.4734 14.4808 11.6266 14.3274 11.8211 14.2922L11.9067 14.2844H14.2835L14.2845 11.903L14.2921 11.8174C14.3274 11.623 14.4807 11.4696 14.6751 11.4344Z"
              fill="white"
            />
          </svg>
          <p className="ft-p-regular">Register new account</p>
        </div>
      );

    case 1:
      return (
        <div className="button v2 filled" onClick={onAddIntegration}>
          <svg width="21" height="22" viewBox="0 0 21 22" fill="none">
            <path
              d="M19.5363 2.33638C19.8878 1.98491 19.8878 1.41506 19.5363 1.06359C19.1849 0.712121 18.6151 0.712121 18.2636 1.06359L15.3287 3.99855C13.4432 2.70956 10.8491 2.90195 9.17526 4.57574L8.81526 4.93574C8.11703 5.63397 8.11703 6.76604 8.81526 7.46427L11.7731 10.4221C12.8525 9.65261 14.1734 9.19999 15.6 9.19999C16.1643 9.19999 16.7123 9.27083 17.2351 9.40412C17.6513 8.02578 17.4401 6.49853 16.6014 5.27142L19.5363 2.33638ZM7.26469 9.0157L10.2221 11.9731C9.4526 13.0525 8.99997 14.3734 8.99997 15.8C8.99997 16.3646 9.07087 16.9126 9.20424 17.4357C7.8258 17.8517 6.29844 17.6403 5.07133 16.8014L2.13637 19.7363C1.7849 20.0878 1.21504 20.0878 0.863577 19.7363C0.512109 19.3849 0.512109 18.8151 0.863577 18.4636L3.79862 15.5285C2.51001 13.6432 2.70253 11.0493 4.37617 9.3757L4.73616 9.0157C5.4344 8.31747 6.56646 8.31747 7.26469 9.0157ZM18.6001 20.2899C17.712 20.8833 16.668 21.2 15.6 21.2C14.1678 21.2 12.7943 20.6311 11.7816 19.6184C10.7689 18.6057 10.2 17.2322 10.2 15.8C10.2 14.732 10.5167 13.688 11.1101 12.7999C11.7035 11.9119 12.5468 11.2197 13.5335 10.811C14.5202 10.4023 15.606 10.2954 16.6535 10.5038C17.7009 10.7121 18.6631 11.2264 19.4184 11.9816C20.1735 12.7369 20.6879 13.699 20.8962 14.7465C21.1046 15.794 20.9977 16.8797 20.589 17.8665C20.1803 18.8531 19.4881 19.6965 18.6001 20.2899ZM16.0243 12.9757C15.9117 12.8632 15.7591 12.8 15.6 12.8C15.4409 12.8 15.2882 12.8632 15.1757 12.9757C15.0632 13.0882 15 13.2409 15 13.4V15.2H13.2C13.0409 15.2 12.8882 15.2632 12.7757 15.3757C12.6632 15.4882 12.6 15.6409 12.6 15.8C12.6 15.9591 12.6632 16.1117 12.7757 16.2243C12.8882 16.3367 13.0409 16.4 13.2 16.4H15V18.2C15 18.3591 15.0632 18.5117 15.1757 18.6243C15.2882 18.7367 15.4409 18.8 15.6 18.8C15.7591 18.8 15.9117 18.7367 16.0243 18.6243C16.1367 18.5117 16.2 18.3591 16.2 18.2V16.4H18C18.1591 16.4 18.3117 16.3367 18.4243 16.2243C18.5367 16.1117 18.6 15.9591 18.6 15.8C18.6 15.6409 18.5367 15.4882 18.4243 15.3757C18.3117 15.2632 18.1591 15.2 18 15.2H16.2V13.4C16.2 13.2409 16.1367 13.0882 16.0243 12.9757Z"
              fill="white"
            />
          </svg>
          <p className="ft-p-regular">Create new integration</p>
        </div>
      );

    default:
      return <></>;
  }
}

function Tab({ tab }) {
  switch (tab) {
    case 0:
      return <Accounts />;
    case 1:
      return <Integrations />;
    case 2:
      return <Settings />;

    default:
      throw new Error("Invalid tab");
  }
}

function Accounts() {
  const { isLoading, accts: accounts, fetchAccts } = useAccounts(true);
  const { state } = useContext(ConfigContext);

  useEffect(() => {
    fetchAccts();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [state.changeTime]);

  return (
    <Table
      key={"tbAccounts"}
      isRefreshing={isLoading}
      rowCount={accounts.length}
      label={"Registered Accounts"}
      titles={[
        "Account NO",
        "Account Alias",
        "Account Currency",
        "Integrations",
        "Actions (Edit, Delete)",
      ]}
      pagination={{ pageCount: 1, page: 1 }}
      showCollapse={true}
    >
      {accounts.map((account, index) => (
        <AccountRow key={index} account={account} />
      ))}
    </Table>
  );
}

function RowAction({ type = "account", action, handleClick }) {
  switch (action) {
    case "edit":
      return (
        <div className="config__btn clickable" onClick={handleClick}>
          {type === "account" ? (
            <svg width="21" height="20" viewBox="0 0 21 20" fill="none">
              <path
                d="M11.5907 12.8546L13.1698 11.4258H2.53416C1.22662 11.4258 0.166656 12.3848 0.166656 13.5679V14.1181C0.166656 14.9685 0.501968 15.791 1.11232 16.4377C2.58171 17.9946 4.73636 18.8488 7.53169 19.0164C7.52738 18.8422 7.54864 18.6631 7.59875 18.4817L7.84194 17.6018C5.34333 17.4878 3.51635 16.7847 2.31317 15.5098C1.94697 15.1219 1.74578 14.6284 1.74578 14.1181V13.5679C1.74578 13.174 2.09875 12.8546 2.53416 12.8546H11.5907ZM8.58497 0C11.492 0 13.8487 2.1323 13.8487 4.76261C13.8487 7.39294 11.492 9.52524 8.58497 9.52524C5.67784 9.52524 3.32117 7.39294 3.32117 4.76261C3.32117 2.1323 5.67784 0 8.58497 0ZM8.58497 1.42878C6.55 1.42878 4.9003 2.9214 4.9003 4.76261C4.9003 6.60384 6.55 8.09646 8.58497 8.09646C10.6199 8.09646 12.2696 6.60384 12.2696 4.76261C12.2696 2.9214 10.6199 1.42878 8.58497 1.42878ZM16.059 10.1583L9.84511 15.7805C9.48286 16.1082 9.22589 16.5189 9.10156 16.9687L8.61971 18.7125C8.41021 19.4708 9.16946 20.1578 10.0076 19.9681L11.9348 19.5322C12.4318 19.4198 12.8858 19.1872 13.2481 18.8594L19.4619 13.2372C20.4016 12.387 20.4016 11.0085 19.4619 10.1583C18.5222 9.30797 16.9987 9.30797 16.059 10.1583Z"
                fill="#121212"
              />
            </svg>
          ) : (
            <svg width="21" height="20" viewBox="0 0 21 20" fill="none">
              <path
                d="M17.3681 3.46297C18.134 4.44827 18.5901 5.68637 18.5901 7.03099C18.5901 7.8458 18.4226 8.62144 18.1203 9.32541C17.6834 9.11972 17.2189 8.96271 16.7341 8.86146C16.9917 8.30451 17.1354 7.68432 17.1354 7.03099C17.1354 4.62079 15.1816 2.66693 12.7714 2.66693C11.3549 2.66693 10.0942 3.34236 9.29653 4.38996C9.03856 4.72863 9.11653 5.19806 9.41755 5.49906L13.0961 9.17762C12.6221 9.3674 12.1767 9.61315 11.7677 9.90651L8.02375 6.16255C7.51781 5.6566 7.30826 4.8992 7.6483 4.26965C8.63164 2.44912 10.5571 1.21225 12.7714 1.21225C14.116 1.21225 15.3542 1.66837 16.3395 2.43433L18.5608 0.213032C18.8449 -0.0710105 19.3054 -0.0710105 19.5894 0.213032C19.8735 0.497074 19.8735 0.957608 19.5894 1.24165L17.3681 3.46297ZM6.56907 7.6172L10.3131 11.3612C10.0197 11.7702 9.77405 12.2157 9.58426 12.6896L5.90558 9.01101C5.60458 8.70998 5.13516 8.63201 4.79649 8.88998C3.74888 9.68763 3.07346 10.9484 3.07346 12.3648C3.07346 14.7751 5.02732 16.7289 7.43752 16.7289C8.0909 16.7289 8.71116 16.5852 9.26811 16.3275C9.36936 16.8124 9.52637 17.2767 9.73206 17.7136C9.02809 18.0161 8.25235 18.1836 7.43752 18.1836C6.09291 18.1836 4.85481 17.7275 3.8695 16.9615L1.6483 19.1828C1.36425 19.4668 0.90372 19.4668 0.619678 19.1828C0.335636 18.8987 0.335636 18.4382 0.619678 18.1542L2.84087 15.933C2.0749 14.9477 1.61878 13.7095 1.61878 12.3648C1.61878 10.1505 2.85564 8.22509 4.67618 7.24175C5.30572 6.90171 6.06313 7.11126 6.56907 7.6172ZM10.9163 14.0344C11.9846 13.7702 12.6192 12.6709 12.3139 11.6136L12.1218 10.9482C12.5478 10.5773 13.0326 10.2766 13.5598 10.063L14.0436 10.572C14.808 11.3765 16.0903 11.3767 16.8551 10.5725L17.3333 10.0696C17.8614 10.2857 18.3468 10.5894 18.7726 10.9636L18.5921 11.5753C18.2781 12.6398 18.9194 13.7502 19.9983 14.01L20.521 14.1359C20.5685 14.4271 20.5933 14.7264 20.5933 15.0316C20.5933 15.3233 20.5707 15.6096 20.5271 15.8886L19.961 16.0287C18.8928 16.293 18.2582 17.3921 18.5634 18.4495L18.7555 19.1147C18.3295 19.4855 17.8446 19.7864 17.3174 20L16.8337 19.4911C16.0694 18.6866 14.787 18.6864 14.0222 19.4906L13.5438 19.9937C13.0158 19.7776 12.5304 19.4739 12.1046 19.0999L12.2852 18.4877C12.5993 17.4234 11.9579 16.313 10.879 16.0531L10.3559 15.9271C10.3083 15.6359 10.2836 15.3368 10.2836 15.0316C10.2836 14.7399 10.3062 14.4536 10.3497 14.1746L10.9163 14.0344ZM14.0326 15.0316C14.0326 15.8349 14.662 16.4863 15.4384 16.4863C16.2149 16.4863 16.8443 15.8349 16.8443 15.0316C16.8443 14.2282 16.2149 13.5769 15.4384 13.5769C14.662 13.5769 14.0326 14.2282 14.0326 15.0316Z"
                fill="#121212"
              />
            </svg>
          )}
          <p className="ft-p-regular">Edit</p>
        </div>
      );
    case "delete":
      return (
        <div className="config__btn clickable" onClick={handleClick}>
          {type === "account" ? (
            <svg width="21" height="20" viewBox="0 0 21 20" fill="none">
              <path
                d="M15.2612 9.52153C18.1547 9.52153 20.5005 11.8672 20.5005 14.7608C20.5005 17.6543 18.1547 20 15.2612 20C12.3676 20 10.022 17.6543 10.022 14.7608C10.022 11.8672 12.3676 9.52153 15.2612 9.52153ZM10.0431 11.426C9.76051 11.8674 9.53236 12.3469 9.36814 12.8552L2.64278 12.8555C2.24819 12.8555 1.92833 13.1754 1.92833 13.5699V14.4342C1.92833 15.0588 2.20076 15.6523 2.67436 16.0594C3.87281 17.0898 5.67892 17.6195 8.11682 17.6195C8.68723 17.6195 9.22315 17.5905 9.72488 17.5329C9.96198 18.0093 10.2609 18.4511 10.6098 18.8478C9.84567 18.9819 9.01406 19.0484 8.11682 19.0484C5.36428 19.0484 3.23161 18.4229 1.74284 17.1429C0.953502 16.4644 0.499451 15.4752 0.499451 14.4342V13.5699C0.499451 12.3862 1.45905 11.4266 2.64278 11.4266L10.0431 11.426ZM12.9684 12.3471L12.9024 12.4022L12.8473 12.4682C12.7348 12.6307 12.7348 12.8474 12.8473 13.0099L12.9024 13.0758L14.588 14.7613L12.9049 16.4444L12.8498 16.5104C12.7373 16.6728 12.7373 16.8896 12.8498 17.052L12.9049 17.118L12.9708 17.1731C13.1332 17.2856 13.3501 17.2856 13.5125 17.1731L13.5785 17.118L15.2615 15.4348L16.9467 17.1201L17.0127 17.1753C17.1751 17.2878 17.3919 17.2878 17.5543 17.1753L17.6203 17.1201L17.6754 17.0542C17.7879 16.8917 17.7879 16.6749 17.6754 16.5125L17.6203 16.4466L15.935 14.7613L17.6229 13.0759L17.678 13.0099C17.7905 12.8475 17.7905 12.6307 17.678 12.4683L17.6229 12.4022L17.557 12.3472C17.3946 12.2347 17.1777 12.2347 17.0153 12.3472L16.9493 12.4022L15.2615 14.088L13.576 12.4022L13.51 12.3471C13.3708 12.2507 13.1916 12.2369 13.0409 12.3058L12.9684 12.3471ZM8.11682 0C10.7473 0 12.8798 2.13245 12.8798 4.76294C12.8798 7.39345 10.7473 9.52591 8.11682 9.52591C5.48628 9.52591 3.35384 7.39345 3.35384 4.76294C3.35384 2.13245 5.48628 0 8.11682 0ZM8.11682 1.42888C6.27543 1.42888 4.78272 2.9216 4.78272 4.76294C4.78272 6.6043 6.27543 8.09702 8.11682 8.09702C9.95817 8.09702 11.4509 6.6043 11.4509 4.76294C11.4509 2.9216 9.95817 1.42888 8.11682 1.42888Z"
                fill="#EC1F26"
              />
            </svg>
          ) : (
            <svg width="21" height="20" viewBox="0 0 21 20" fill="none">
              <path
                d="M20.6136 1.28033C20.9065 0.987437 20.9065 0.512558 20.6136 0.219668C20.3207 -0.0732225 19.8459 -0.0732225 19.553 0.219668L17.541 2.23161C15.8816 1.05263 13.5656 1.20693 12.0781 2.6945L11.01 3.76252C10.3266 4.44594 10.3266 5.55398 11.01 6.2374L14.5958 9.8232C15.2793 10.5066 16.3873 10.5066 17.0707 9.8232L18.1387 8.7552C19.6263 7.26761 19.7806 4.9517 18.6017 3.29228L20.6136 1.28033ZM17.0278 3.75516L17.0506 3.77798L17.053 3.78033L17.0553 3.78267L17.0781 3.80542C18.152 4.87936 18.152 6.62056 17.0781 7.6945L16.01 8.7625C15.9124 8.8602 15.7541 8.8602 15.6565 8.7625L12.0707 5.17674C11.9731 5.07911 11.9731 4.92082 12.0707 4.82318L13.1387 3.75516C14.2127 2.68122 15.9539 2.68122 17.0278 3.75516ZM9.61361 9.2803C9.90651 8.9874 9.90651 8.5126 9.61361 8.2197C9.32071 7.92678 8.84591 7.92678 8.55298 8.2197L6.83332 9.9393L6.36366 9.4697C6.07077 9.1768 5.59589 9.1768 5.303 9.4697L3.52787 11.2448C2.04032 12.7324 1.88601 15.0483 3.06494 16.7077L1.05298 18.7197C0.76009 19.0126 0.76009 19.4874 1.05298 19.7803C1.34587 20.0732 1.82075 20.0732 2.11364 19.7803L4.1256 17.7684C5.78502 18.9473 8.10097 18.793 9.58851 17.3055L11.3636 15.5303C11.6565 15.2374 11.6565 14.7626 11.3636 14.4697L10.894 14L12.6136 12.2803C12.9065 11.9874 12.9065 11.5126 12.6136 11.2197C12.3207 10.9268 11.8459 10.9268 11.553 11.2197L9.83331 12.9393L7.89398 11L9.61361 9.2803ZM6.29962 11.527L6.30298 11.5303L6.30636 11.5337L9.29971 14.527L9.30301 14.5303L9.30631 14.5336L9.77271 15L8.52787 16.2448C7.45393 17.3187 5.71273 17.3187 4.63879 16.2448L4.58853 16.1945C3.51459 15.1206 3.51459 13.3794 4.58853 12.3055L5.83333 11.0607L6.29962 11.527Z"
                fill="#EC1F26"
              />
            </svg>
          )}
          <p className="ft-p-regular clr--red">Delete</p>
        </div>
      );

    case "view":
      return (
        <div className="config__btn clickable" onClick={handleClick}>
          <svg width="21" height="20" viewBox="0 0 21 20" fill="none">
            <path
              d="M18.1565 3.57084C18.9463 4.58684 19.4166 5.8635 19.4166 7.25001C19.4166 9.5333 18.1412 11.5187 16.2639 12.5327C15.6148 12.8833 14.8338 12.6672 14.3121 12.1455L8.52106 6.35451C7.99936 5.8328 7.78328 5.05181 8.13391 4.40265C9.14788 2.52541 11.1333 1.25001 13.4166 1.25001C14.8031 1.25001 16.0799 1.72034 17.0959 2.51016L19.3864 0.219668C19.6793 -0.0732225 20.1541 -0.0732225 20.447 0.219668C20.7399 0.512558 20.7399 0.987437 20.447 1.28033L18.1565 3.57084ZM16.1399 10.8331C17.2201 10.0106 17.9166 8.7106 17.9166 7.25001C17.9166 4.76473 15.9019 2.75001 13.4166 2.75001C11.956 2.75001 10.656 3.44648 9.83348 4.52671C9.56748 4.87593 9.64788 5.35998 9.95828 5.67036L14.9962 10.7083C15.3066 11.0187 15.7907 11.0991 16.1399 10.8331ZM1.94701 19.7803L4.2374 17.4899C5.25341 18.2797 6.53008 18.75 7.91657 18.75C10.1999 18.75 12.1853 17.4746 13.1992 15.5973C13.5499 14.9482 13.3338 14.1672 12.8121 13.6455L7.02106 7.85448C6.49936 7.33278 5.71836 7.1167 5.06921 7.46733C3.19196 8.4813 1.91657 10.4667 1.91657 12.75C1.91657 14.1366 2.3869 15.4133 3.17673 16.4293L0.886355 18.7197C0.593465 19.0126 0.593465 19.4874 0.886355 19.7803C1.17924 20.0732 1.65412 20.0732 1.94701 19.7803ZM6.33691 9.2917L11.3749 14.3296C11.6853 14.64 11.7656 15.1241 11.4997 15.4733C10.6772 16.5535 9.37718 17.25 7.91657 17.25C5.43129 17.25 3.41657 15.2353 3.41657 12.75C3.41657 11.2894 4.11303 9.9894 5.19327 9.1669C5.54249 8.9009 6.02653 8.9813 6.33691 9.2917Z"
              fill="#121212"
            />
          </svg>

          <p className="ft-p-regular">View</p>
        </div>
      );
    default:
      throw new Error("Invalid action");
  }
}

function AccountRow({ account }) {
  const { dispatch } = useContext(ConfigContext);
  const { config, openDialog } = useDialog();
  const { deleteAccount } = useAccounts(false);

  const currenyDetails = currencies.code(account.currencyCode);

  function onEditAccount() {
    dispatch({ type: "updateShowAccountModal", payload: true });
    dispatch({ type: "updateAccountAction", payload: "edit" });
    dispatch({ type: "updateEditAccount", payload: account });
  }

  function onDeleteAccount() {
    const extendConfig = {
      ...config,
      title: "Are you sure?",
      description:
        "Confirm to deregister this account and permanently delete any associated integration.",
    };
    openDialog(extendConfig, "danger", () => deleteAccount(account.ledgerId));
  }

  return (
    <tr>
      <td>{account.ledgerId}</td>
      <td>{account.alias}</td>
      <td>{currenyDetails?.currency || account.currencyCode}</td>
      <td>
        <span className="config__pile">{account.ints.api} API</span>
        <span className="config__pile">{account.ints.dir} DIR</span>
      </td>
      <td>
        <RowAction type="account" action={"edit"} handleClick={onEditAccount} />
        <RowAction
          type="account"
          action={"delete"}
          handleClick={onDeleteAccount}
        />
      </td>
    </tr>
  );
}

function Integrations() {
  const [page, setPage] = useState(1);
  const { isLoading, ints: integrations } = useInts(page);

  return (
    <Table
      key={"tbAccounts"}
      rowCount={integrations?.ints.length}
      isRefreshing={isLoading}
      label={"Account Integrations"}
      titles={[
        "Account Alias",
        "Integration Alias",
        "Integration Type",
        "Expected Data",
        "Actions (View, Edit, Delete)",
      ]}
      pagination={{
        pageCount: integrations?.pages,
        page,
        setPage,
      }}
    >
      {integrations?.ints.map((integration, index) => (
        <IntegrationRow key={index} integration={integration} />
      ))}
    </Table>
  );
}

function IntegrationRow({ integration }) {
  const { dispatch } = useContext(ConfigContext);

  function onViewIntegration() {
    dispatch({ type: "updateShowIntegrationModal" });
    dispatch({ type: "updateSelectedIntegration", payload: integration });
  }

  return (
    <tr>
      <td>{integration.acctAlias}</td>
      <td>{integration.alias}</td>
      <td>
        <div className="config__pile">{integration.type.toUpperCase()}</div>
      </td>
      <td>
        <div className="config__pile">
          {integration.config?.dataFormat.toUpperCase()}
        </div>
      </td>
      <td>
        <RowAction
          type="integration"
          action={"view"}
          handleClick={onViewIntegration}
        />
        <RowAction type="integration" action={"edit"} handleClick={() => {}} />
        <RowAction
          type="integration"
          action={"delete"}
          handleClick={() => {}}
        />
      </td>
    </tr>
  );
}

function Settings() {
  return <div>Settings</div>;
}
